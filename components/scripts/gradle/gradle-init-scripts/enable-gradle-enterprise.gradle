import org.gradle.util.GradleVersion

// Don't run against the included builds (if the main build has any).
initscript {
    def isTopLevelBuild = !gradle.parent
    if (!isTopLevelBuild) {
        return
    }

    def gradleEnterprisePluginVersion = "3.12.1"
    def commonCustomUserDataPluginVersion = "1.8.2"

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath("com.gradle:gradle-enterprise-gradle-plugin:${gradleEnterprisePluginVersion}")
        classpath("com.gradle:common-custom-user-data-gradle-plugin:${commonCustomUserDataPluginVersion}")
    }
}

def isTopLevelBuild = !gradle.parent
if (!isTopLevelBuild) {
    return
}

def BUILD_SCAN_PLUGIN_CLASS = 'com.gradle.scan.plugin.BuildScanPlugin'

def GRADLE_ENTERPRISE_PLUGIN_ID = 'com.gradle.enterprise'
def GRADLE_ENTERPRISE_PLUGIN_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterprisePlugin'

def CCUD_PLUGIN_ID = 'com.gradle.common-custom-user-data-gradle-plugin'
def CCUD_PLUGIN_CLASS = 'com.gradle.CommonCustomUserDataGradlePlugin'

def version = GradleVersion.current().baseVersion
def atLeastGradle5 = version >= GradleVersion.version("5.0")
def atLeastGradle6 = version >= GradleVersion.version("6.0")

if (atLeastGradle6) {
    gradle.settingsEvaluated { settings ->
        if (!settings.pluginManager.hasPlugin(GRADLE_ENTERPRISE_PLUGIN_ID)) {
            logger.quiet("Applying $GRADLE_ENTERPRISE_PLUGIN_CLASS via init script")
            settings.pluginManager.apply(initscript.classLoader.loadClass(GRADLE_ENTERPRISE_PLUGIN_CLASS))
        }
        if (!settings.pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
            logger.quiet("Applying $CCUD_PLUGIN_CLASS via init script")
            settings.pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
        }
    }
} else if (atLeastGradle5) {
    rootProject {
        buildscript.configurations.getByName("classpath").incoming.afterResolve { ResolvableDependencies incoming ->
            def resolutionResult = incoming.resolutionResult

            def scanPluginComponent = resolutionResult.allComponents.find {
                it.moduleVersion.with { group == "com.gradle" && (name == "build-scan-plugin" || name == "gradle-enterprise-gradle-plugin") }
            }
            if (!scanPluginComponent) {
                logger.quiet("Applying $BUILD_SCAN_PLUGIN_CLASS via init script")
                pluginManager.apply(initscript.classLoader.loadClass(BUILD_SCAN_PLUGIN_CLASS))
            }

            def ccudPluginComponent = resolutionResult.allComponents.find {
                it.moduleVersion.with { group == "com.gradle" && name == "common-custom-user-data-gradle-plugin" }
            }
            if (!ccudPluginComponent) {
                logger.quiet("Applying $CCUD_PLUGIN_CLASS via init script")
                pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
            }
        }
    }
} else {
    throw new IllegalStateException("Build validation not supported for Gradle ${GradleVersion.current()}. Upgrade your project's build to Gradle 5 or newer.")
}

