import org.gradle.util.GradleVersion
import java.nio.charset.StandardCharsets;

// Don't run against the included builds (if the main build has any).
def isTopLevelBuild = !gradle.parent
if (isTopLevelBuild) {
    def version = GradleVersion.current().baseVersion
    def atLeastGradle5 = version >= GradleVersion.version("5.0")
    def atLeastGradle6 = version >= GradleVersion.version("6.0")
    def isScanDump = System.properties.containsKey("scan.dump")

    clearWarnings()

    if (atLeastGradle6) {
        settingsEvaluated { settings ->
            if (!settings.pluginManager.hasPlugin("com.gradle.enterprise")) {
                throw new IllegalStateException("The com.gradle.enterprise plugin is missing from the project.\n" +
                    "Either apply it directly (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_6_x_and_later),\n" +
                    "or use `--enable-gradle-enterprise` when running the build validation script.")
            }
            if (!settings.pluginManager.hasPlugin("com.gradle.common-custom-user-data-gradle-plugin")) {
                logWarningMissingCommonCustomUserDataGradlePlugin()
            }
            if (!isScanDump) {
                configureGradleEnterprise(settings.extensions["gradleEnterprise"])
            }
        }
    } else if (atLeastGradle5) {
        projectsEvaluated { gradle ->
            if (!gradle.rootProject.pluginManager.hasPlugin("com.gradle.build-scan")) {
                throw new IllegalStateException("The com.gradle.build-scan plugin is missing from the project.\n" +
                    "Either apply it directly (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_5_x),\n" +
                    "or use `--enable-gradle-enterprise` when running the build validation script.")
            }
            if (!gradle.rootProject.pluginManager.hasPlugin("com.gradle.common-custom-user-data-gradle-plugin")) {
                logWarningMissingCommonCustomUserDataGradlePlugin()
            }
            if (!isScanDump) {
                configureGradleEnterprise(gradle.rootProject.extensions["gradleEnterprise"])
            }
        }
    } else {
        throw new IllegalStateException("Build validation not supported for Gradle ${GradleVersion.current()}. Upgrade your project's build to Gradle 5 or newer.")
    }
}

void configureGradleEnterprise(gradleEnterprise) {
    gradleEnterprise.with {
        buildScan {
            def serverOverride = System.getProperty("com.gradle.enterprise.build_validation.server")
            if (serverOverride) {
                server = serverOverride
            } else if (!server) {
                throw new IllegalStateException("A Gradle Enterprise server URL has not been configured.", null)
            }

            // captureTaskInputFiles = true (too late to be set here for Gradle 5, set via sys prop)
            uploadInBackground = false
            publishAlways()
        }
        captureBuildScanLinks(buildScan)
        addCustomData(buildScan)
    }
}

void captureBuildScanLinks(buildScan) {
    buildScan.with {
        def scanFile = new File(experimentDir, "build-scans.csv")
        buildScanPublished { publishedBuildScan ->
            def buildScanUri = publishedBuildScan.buildScanUri
            def buildScanId = publishedBuildScan.buildScanId
            def port = (buildScanUri.port != -1) ? ":" + buildScanUri.port : ""
            def baseUrl = "${buildScanUri.scheme}://${buildScanUri.host}${port}"
            scanFile.append("${baseUrl},${buildScanUri},${buildScanId}\n")
        }
        def errorFile = new File(experimentDir, "build-scan-publish-error.txt")
        onError { error ->
            errorFile.text = error
        }
    }
}

void addCustomData(buildScan) {
    def projectProperties = gradle.startParameter.projectProperties

    def expId = projectProperties.get("com.gradle.enterprise.build_validation.expId")
    addCustomValueAndSearchLink(buildScan, "Experiment id", expId)
    buildScan.tag(expId)

    def runId = projectProperties.get("com.gradle.enterprise.build_validation.runId")
    addCustomValueAndSearchLink(buildScan, "Experiment run id", runId)
}

void addCustomValueAndSearchLink(buildScan, String label, String value) {
    buildScan.value(label, value)
    String server = buildScan.server
    String searchParams = "search.names=" + urlEncode(label) + "&search.values=" + urlEncode(value)
    String url = appendIfMissing(server, "/") + "scans?" + searchParams + "#selection.buildScanB=" + urlEncode("{SCAN_ID}")
    buildScan.link(label + " build scans", url)
}

String appendIfMissing(String str, String suffix) {
    return str.endsWith(suffix) ? str : str + suffix
}

String urlEncode(String str) {
    return URLEncoder.encode(str, StandardCharsets.UTF_8.name())
}

void logWarningMissingCommonCustomUserDataGradlePlugin() {
    logWarning("The com.gradle.common-custom-user-data-gradle-plugin plugin is missing from the project (see https://github.com/gradle/common-custom-user-data-gradle-plugin).")
}

void logWarning(String warning) {
    def warningFile = new File(experimentDir, "warnings.txt")
    warningFile.append(warning + "\n")
}

void clearWarnings() {
    def warningFile = new File(experimentDir, "warnings.txt")
    warningFile.delete()
}

File getExperimentDir() {
    def projectProperties = gradle.startParameter.projectProperties
    new File(projectProperties.get("com.gradle.enterprise.build_validation.experimentDir"))
}
